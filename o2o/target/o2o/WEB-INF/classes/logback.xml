<?xml version="1.0" encoding="UTF-8"?>
<!--
    scan = true 表示当配置文件发生修改会重新加载，后面是每隔多少时间扫描一下
    debug = true ：表示打印 logback 内部的日志信息，实时查看 logback 的运行状态；

-->
<configuration scan="true" scanPeriod="60 seconds" debug="false">
    <!--定义参数常量-->
        <!--
            日志级别为：trace < debug < info < warn < error
            使用方式：logger.trace("msg");等等
        -->
    <property name="log.level" value="debug"></property>
        <!--日志最大保存时间-->
    <property name="log.maxHistory" value="30"></property>
        <!--日志保存路径：Tomcat 实例的根目录-->
    <property name="log.filePath" value="${catalina.base}/logs/webapps"></property>
        <!--日志输出格式：时间格式，线程名称，向左空5格，日志级别，哪个类中，日志信息-->
    <property name="log.pattern"
              value="%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger{50}-%msg%n"></property>

    <!--输出日志的位置，这里是控制台-->
    <appender name="consoleAppender" class="ch.qos.logback.core.ConsoleAppender">
        <encoder>
            <pattern>${log.pattern}</pattern>
        </encoder>
    </appender>

    <!--将日志按照 3 个不同级别，分别输出到不同文件中-->


    <!--DEBUG：设置日志滚动输出到文件中-->
    <appender name="debugAppender"
              class="ch.qos.logback.core.rolling.RollingFileAppender">
        <!--设置文件路径和文件滚动策略（规则） -->
        <file>${log.filePath}/debug.log</file>
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <!--设置生成日志文件名称-->
            <fileNamePattern>${log.filePath}/debug/debug.%d{yyyy-MM-dd}.log.gz</fileNamePattern>
            <!--文件最大保存历史数量-->
            <maxHistory>${log.maxHistory}</maxHistory>
        </rollingPolicy>
        <!--将日志信息转换为字符串，又将字符串输出到文件中-->
        <encoder>
            <pattern>${log.pattern}</pattern>
        </encoder>
        <!--设置日志过滤，这里仅仅保存 Debug 信息，其他信息一律不保存-->
        <filter class="ch.qos.logback.classic.filter.LevelFilter">
            <level>DEBUG</level>
            <onMatch>ACCEPT</onMatch>
            <onMismatch>DENY</onMismatch>
        </filter>
    </appender>

    <!--Info-->
    <appender name="infoAppender"
              class="ch.qos.logback.core.rolling.RollingFileAppender">
        <!--设置文件路径和文件滚动策略（规则） -->
        <file>${log.filePath}/info.log</file>
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <!--设置生成日志文件名称-->
            <fileNamePattern>${log.filePath}/info/info.%d{yyyy-MM-dd}.log.gz</fileNamePattern>
            <!--文件最大保存历史数量-->
            <maxHistory>${log.maxHistory}</maxHistory>
        </rollingPolicy>
        <!--将日志信息转换为字符串，又将字符串输出到文件中-->
        <encoder>
            <pattern>${log.pattern}</pattern>
        </encoder>
        <!--设置日志过滤，这里仅仅保存 Debug 信息，其他信息一律不保存-->
        <filter class="ch.qos.logback.classic.filter.LevelFilter">
            <level>INFO</level>
            <onMatch>ACCEPT</onMatch>
            <onMismatch>DENY</onMismatch>
        </filter>
    </appender>

    <!--ERROR-->
    <appender name="errorAppender"
              class="ch.qos.logback.core.rolling.RollingFileAppender">
        <!--设置文件路径和文件滚动策略（规则） -->
        <file>${log.filePath}/info.log</file>
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <!--设置生成日志文件名称-->
            <fileNamePattern>${log.filePath}/error/error.%d{yyyy-MM-dd}.log.gz</fileNamePattern>
            <!--文件最大保存历史数量-->
            <maxHistory>${log.maxHistory}</maxHistory>
        </rollingPolicy>
        <!--将日志信息转换为字符串，又将字符串输出到文件中-->
        <encoder>
            <pattern>${log.pattern}</pattern>
        </encoder>
        <!--设置日志过滤，这里仅仅保存 Debug 信息，其他信息一律不保存-->
        <filter class="ch.qos.logback.classic.filter.LevelFilter">
            <level>ERROR</level>
            <onMatch>ACCEPT</onMatch>
            <onMismatch>DENY</onMismatch>
        </filter>
    </appender>

    <!--存放日志对象，同时告诉 logback 哪些包里面信息需要关注-->
        <!--true 表示：将 root 中的 appender-ref 加入当前 logger 中，也就是说 log级别日志也会输出到 console 中，同时输出到
        console 中的级别是 log.level 设置的-->
    <logger name="com.gjxaiou" level="${log.level}" additivity="true">
        <!--logger 和 appender-ref 绑定-->
        <appender-ref ref="debugAppender"/>
        <appender-ref ref="infoAppender"/>
        <appender-ref ref="errorAppender"/>
    </logger>

    <!--指定根 logger级别，如果没有指定上面的 level，就会使用根 level，输出根 level 以上级别，同时默认打印到控制台-->
    <root level="info">
        <appender-ref ref="consoleAppender"/>
    </root>
</configuration>